<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.airtnt.airtnt.service.PropertyMapper">
	
	<resultMap type="propertyDTO" id="propertyMap">
		<id property="id" column="id"/>
		<result property="rowNum" column="rnum"/>
		<result property="name" column="name"/>
		<result property="propertyDesc" column="property_desc"/>
		<result property="address" column="address"/>
		<result property="latitude" column="latitude"/>
		<result property="longitude" column="longitude"/>
		<result property="price" column="price"/>
		<result property="bedCount" column="bed_count"/>
		<result property="maxGuest" column="max_guest"/>
		<result property="regDate" column="reg_date"/>
		<result property="modDate" column="mod_date"/>
		
		<association property="host" column="host_id" columnPrefix="host_" javaType="memberDTO">
			<id property="id" column="id"/>
			<result property="name" column="name"/>
		</association>
		<association property="propertyType" column="property_type_id"
			columnPrefix="property_type_" resultMap="propertyTypeMap"/>
		<association property="subPropertyType" column="sub_property_type_id"
			columnPrefix="sub_property_type_" resultMap="subPropertyTypeMap"/>
		<association property="roomType" column="room_type_id"
			columnPrefix="room_type_" resultMap="roomTypeMap"/>
		
		<collection property="amenityTypes" ofType="amenityTypeDTO"
			columnPrefix="amenity_type_" resultMap="amenityTypeMap" />
		<collection property="images" ofType="imageDTO"
			columnPrefix="image_" resultMap="imageMap"/>
		<collection property="reviews" ofType="reviewDTO"
			columnPrefix="review_" resultMap="reviewMap"/>
	</resultMap>
	
	<resultMap type="propertyTypeDTO" id="propertyTypeMap">
		<id property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="isUse" column="is_use"/>
		<result property="regDate" column="reg_date"/>
		<result property="modDate" column="mod_date"/>
		
		<collection property="subPropertyTypes" ofType="subPropertyTypeDTO"
			columnPrefix="sub_property_type_" resultMap="subPropertyTypeMap"/>
	</resultMap>
	
	<resultMap type="subPropertyTypeDTO" id="subPropertyTypeMap">
		<id property="id" column="id"/>
		<result property="propertyTypeId" column="property_type_id"/>
		<result property="name" column="name"/>
		<result property="isUse" column="is_use"/>
		<result property="regDate" column="reg_date"/>
		<result property="modDate" column="mod_date"/>
	</resultMap>
	
	<resultMap type="roomTypeDTO" id="roomTypeMap">
		<id property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="isUse" column="is_use"/>
		<result property="regDate" column="reg_date"/>
		<result property="modDate" column="mod_date"/>
	</resultMap>
	
	<resultMap type="amenityTypeDTO" id="amenityTypeMap">
		<id property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="isUse" column="is_use"/>
		<result property="regDate" column="reg_date"/>
		<result property="modDate" column="mod_date"/>
	</resultMap>
	
	<resultMap type="imageDTO" id="imageMap">
		<id property="id" column="id"/>
		<result property="propertyId" column="property_id"/>
		<result property="isMain" column="is_main"/>
		<result property="path" column="path"/>
		<result property="fileSize" column="file_size"/>
		<result property="regDate" column="reg_date"/>
		<result property="modDate" column="mod_date"/>
	</resultMap>
	
	<resultMap type="reviewDTO" id="reviewMap">
		<id property="id" column="id"/>
		<result property="property_id" column="property_id"/>
		<result property="booking_id" column="booking_id"/>
		<result property="rating" column="rating"/>
		<result property="content" column="content"/>
		<result property="content_host" column="content_host"/>
		<result property="content_host_date" column="content_host_date"/>
		<result property="reg_date" column="reg_date"/>
		<result property="mod_date" column="mod_date"/>
		
		<association property="writer" column="writer_id"
		columnPrefix="writer_" javaType="memberDTO">
			<id property="id" column="id"/>
			<result property="name" column="name"/>
		</association>
	</resultMap>
	
	
	<!-- 중복되는 sql 구문들을 따로 빼둠 -->
	
	<!-- select property에서 기준이 되는 property 테이블의 select문 -->
	<sql id="standardSelectProperty">
		p.id,
		p.name,
		p.property_desc,
		p.address,
		p.latitude,
		p.longitude,
		p.price,
		p.bed_count,
		p.max_guest,
		p.reg_date,
		p.mod_date
	</sql>
	
	<!-- select property에서 property와 1:1 관계인 테이블의 select문 -->
	<sql id="oneToOneSelectProperty">
		h.id host_id,
		h.name host_name,
		
		pt.id property_type_id,
		pt.name property_type_name,
		pt.is_use property_type_is_use,
		pt.reg_date property_type_reg_date,
		pt.mod_date property_type_mod_date,
		
		spt.id sub_property_type_id,
		spt.name sub_property_type_name,
		spt.is_use sub_property_type_is_use,
		spt.reg_date sub_property_type_reg_date,
		spt.mod_date sub_property_type_mod_date,
		
		rt.id room_type_id,
		rt.name room_type_name,
		rt.is_use room_type_is_use,
		rt.reg_date room_type_reg_date,
		rt.mod_date room_type_mod_date
	</sql>
	
	<!-- select property에서 1:1 관계인 테이블의 join문 -->
	<sql id="oneToOneJoinProperty">
		left join member h on p.host_id=h.id
		left join property_type pt on p.property_type_id=pt.id
		left join sub_property_type spt on p.sub_property_type_id=spt.id
		left join room_type rt on p.room_type_id=rt.id
	</sql>
	
	<!-- select property에서 1:N 관계인 테이블의 select문 -->
	<sql id="oneToNSelectProperty">
		at.id amenity_type_id,
		at.name amenity_type_name,
		at.is_use amenity_type_is_use,
		at.reg_date amenity_type_reg_date,
		at.mod_date amenity_type_mod_date,
		
		i.id image_id,
		i.is_main image_is_main,
		i.path image_path,
		i.file_size image_file_size,
		i.reg_date image_reg_date,
		i.mod_date image_mod_date,
		
		r.id review_id,
		r.rating review_rating,
		r.content review_content,
		r.content_host review_content_host,
		r.content_host_date review_content_host_date,
		r.reg_date review_reg_date,
		r.mod_date review_mod_date,
		
		w.id review_writer_id,
		w.name review_writer_name
	</sql>
	
	<!-- select property에서 1:N 관계인 테이블의 join문 -->
	<sql id="oneToNJoinProperty">
		left join amenity a on p.id=a.property_id
		left join amenity_type at on at.id=a.amenity_type_id
		left join image i on p.id=i.property_id
		left join review r on p.id=r.property_id
		left join member w on w.id=r.writer_id
	</sql>
	
	<!-- 검색페이지의 숙소목록 로딩에 사용 -->
	<!--
		select
			filtered properties, amenity types, images, reviews
		from
		(
			select
				rownum, property, property type, sub-property type, room type
			from
				property
				left join property type, sub-property type, room type
			where
				property address like '%주소%'
				and (filter, rownum 처리 구문)
		) as filtered properties
		left join amenity, amenity type, image, review
		의 구조임
		
		1:1 관계인 select문은 필터처리의 효율을 위해 안의 select문에 배치하고
		1:N 관계인 select문은 rownum의 중복을 피하기 위해 밖의 select문에 배치
	-->
	<!-- select문을 최소 2번에서 최대 3번까지 실행 -->
	<select id="searchProperties" parameterType="java.util.Map" resultMap="propertyMap">
		select
			p.*,
			<include refid="oneToNSelectProperty"/>
			
		from
		(
			<!-- searchProperties의 필터와 rownum 처리 구문 -->
			<include refid="searchFilters">
				<property name="addressKey" value="addressKey"/>
				<property name="propertyTypeIdKeyArray" value="propertyTypeIdKeyArray"/>
				<property name="subPropertyTypeIdKeyArray" value="subPropertyTypeIdKeyArray"/>
				<property name="roomTypeIdKeyArray" value="roomTypeIdKeyArray"/>
				<property name="amenityTypeIdKeyArray" value="amenityTypeIdKeyArray"/>
				<property name="guestCountKey" value="guestCountKey"/>
				<property name="bedCountKey" value="bedCountKey"/>
				<property name="minPriceKey" value="minPriceKey"/>
				<property name="maxPriceKey" value="maxPriceKey"/>
				<property name="latitude" value="latitude"/>
				<property name="longitude" value="longitude"/>
			</include>
		) p	<!-- p : filtered properties + rownum -->
		<include refid="oneToNJoinProperty"/>
		
		order by rnum
	</select>
	
	<!-- searchProperties의 필터와 rownum 처리 구문 -->
	<sql id="searchFilters">
		select
			rownum rnum,
			<include refid="standardSelectProperty"/>,
			<include refid="oneToOneSelectProperty"/>
			
		from
			property p
			<include refid="oneToOneJoinProperty"/>
			
		where
			<bind name="addressKey" value="'%' + addressKey + '%'"/>
			p.address like #{addressKey}
		<!--
			1:1 관계인 테이블의 컬럼들을 여기서 select하지 않으면
			amenity type을 필터링하는 것과 마찬가지로
			
			and p.id in
			(
				select
					p.id
				from
					property p
					left join property_type pt on p.id = pt.id
				where
					pt.id in (filter의 property type id 값들)
			)
			
			이런식으로 전부 select문을 돌려야하므로
			1:1 관계인 테이블들은 조건문을 적용하는 레벨의 select문에서
			join하는 것이 효율적임
		-->
		<if test="propertyTypeIdKeyArray != null">
			and pt.id in
			<foreach item="propertyTypeIdKey" collection="propertyTypeIdKeyArray"
			open="(" separator="," close=")">
				#{propertyTypeIdKey}
			</foreach>
			and pt.is_use='Y'
		</if>
		<if test="subPropertyTypeIdKeyArray != null">
			and spt.id in
			<foreach item="subPropertyTypeIdKey" collection="subPropertyTypeIdKeyArray"
			open="(" separator="," close=")">
				#{subPropertyTypeIdKey}
			</foreach>
			and spt.is_use='Y'
		</if>
		<if test="roomTypeIdKeyArray != null">
			 and rt.id in
			<foreach item="roomTypeIdKey" collection="roomTypeIdKeyArray"
			open="(" separator="," close=")">
				#{roomTypeIdKey}
			</foreach>
			and rt.is_use='Y'
		</if>
		<if test="amenityTypeIdKeyArray != null">
			and p.id in
			(
				select p.id
				from property p
				left join amenity a on p.id=a.property_id
				left join amenity_type at on at.id=a.amenity_type_id
				where at.id in
				<foreach item="amenityTypeIdKey" collection="amenityTypeIdKeyArray"
				open="(" separator="," close=")">
					#{amenityTypeIdKey}
				</foreach>
				and at.is_use='Y'
			)
		</if>
		<if test="guestCountKey != null">
			and p.max_guest <![CDATA[ >= ]]> #{guestCountKey}
		</if>
		<if test="bedCountKey != null">
			and p.bed_count <![CDATA[ >= ]]> #{bedCountKey}
		</if>
		<if test="minPriceKey != null">
			and p.price <![CDATA[ >= ]]> #{minPriceKey}
		</if>
		<if test="maxPriceKey != null">
			and p.price <![CDATA[ <= ]]> #{maxPriceKey}
		</if>
		<!-- 거리의 제곱의 오름차순 정렬 -->
		<if test="latitude != null and longitude != null">
			order by
			power(to_number(p.latitude) - to_number(#{latitude}), 2)
			+ power(to_number(p.longitude) - to_number(#{longitude}), 2)
		</if>
	</sql>
	
	<!-- 쿠키의 최근목록 로딩과 상세페이지 로딩에 사용 -->
	<!-- select문은 한번만 실행 -->
	<!--
		select
			property, property type, sub-property type, room type, amenity types, images, reviews
		from
			property
			left join property type, sub-property type, room type, amenity, amenity type, image, review
		의 구조임
		
		전체 select문 실행횟수를 최소화하기위해
		모든 관계에 대하여 같은 레벨의 select문에 배치
	-->
	<select id="selectProperty" parameterType="java.util.Map" resultMap="propertyMap">
		select
			<include refid="standardSelectProperty"/>,
			<include refid="oneToOneSelectProperty"/>,
			<include refid="oneToNSelectProperty"/>
			
		from
			property p
			<include refid="oneToOneJoinProperty"/>
			<include refid="oneToNJoinProperty"/>
			
		where
		<choose>
			<!-- 쿠키에서 최근목록 불러오는 로직 -->
			<when test="propertyIdList != null">
				p.id in
				<foreach item="propertyId" collection="propertyIdList"
				open="(" separator="," close=")">
					#{propertyId}
				</foreach>
			</when>
			<!-- 상세페이지로 로딩하는 로직 -->
			<when test="propertyId != null">
				p.id=#{propertyId}
			</when>
			<!-- 호스트가 등록한 숙소들을 로딩 -->
			<when test="hostId != null">
				p.host_id=#{hostId}
			</when>
		</choose>
	</select>
	
	<select id="selectPropertyTypes" resultMap="propertyTypeMap">
		select
			pt.*,
			
			spt.id sub_property_type_id,
			spt.name sub_property_type_name,
			spt.is_use sub_property_type_is_use,
			spt.reg_date sub_property_type_reg_date,
			spt.mod_date sub_property_type_mod_date
		
		from
			property_type pt
			join sub_property_type spt on pt.id=spt.property_type_id
			
		where
			pt.is_use='Y' and
			spt.is_use='Y'
			
		order by
			pt.id asc, spt.id asc
	</select>
	
	<select id="selectRoomTypes" resultMap="roomTypeMap">
		select * from room_type
		where is_use='Y'
		order by id asc
	</select>
	
	<select id="selectAmenityTypes" resultMap="amenityTypeMap">
		select * from amenity_type
		where is_use='Y'
		order by id asc
	</select>
	
</mapper>