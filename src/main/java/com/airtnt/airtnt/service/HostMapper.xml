<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.airtnt.airtnt.service.HostMapper">

	<select id="listGuide" resultType="GuideDTO">
		select
		id, subject,
		reg_date as
		regDate,
		mod_date as modDate,
		explanation from guide
	</select>

	<select id="getGuide" parameterType="int" resultType="guideDTO">
		select
		id,
		subject,
		reg_date as regDate,
		mod_date as modDate,
		explanation
		from guide
		where id = #{id}
	</select>

	<insert id="insertProperty" parameterType="propertyDTO">
		insert into property(name, host_id, property_desc, property_type_id,
		sub_property_type_id,
		room_type_id, address, price, bed_count,
		max_guest)
		values(#{name}, #{hostId}, #{propertyDesc},
		#{propertyTypeId}, #{subPropertyTypeId},
		#{roomTypeId},
		#{address},
		#{price}, #{bedCount}, #{maxGuest})<!-- modeDate==null -->
	</insert>

	<delete id="deleteProperty" parameterType="int">
	</delete>

	<select id="propertyType" resultType="propertyTypeDTO">
		select
		id, name,
		is_use as
		isUse,
		reg_date as regDate,
		mod_date as modDate
		from property_type order
		by id
	</select>

	<select id="subPropertyType" parameterType="int"
		resultType="subPropertyTypeDTO">
		select
		id, name,
		property_type_id as propertyTypeId,
		is_use as
		isUse,
		reg_date as regDate,
		mod_date as modDate from sub_property_type
		where property_type_id =
		#{propertyTypeId}
	</select>

	<select id="roomType" resultType="roomTypeDTO">
		select
		id, name,
		is_use as isUse,
		reg_date as regDate,
		mod_date as modDate
		from room_type
	</select>

	<select id="listBooking" parameterType="String" resultType="BookingDTO">
		SELECT
		b.id,
		b.property_id as propertyId,
		b.guest_id as guestId,
		b.host_id as hostId,
		b.guest_count as guestCount,
		b.day_count as dayCount,
		b.total_price as totalPrice,
		b.booking_number as bookingNumber,
		b.check_in_date as checkInDate,
		b.check_out_date as
		checkOutDate,
		b.confirm_date as confirmDate,
		b.reg_date as regDate,
		b.mod_date as modDate,
		m.name as guestName,
		m.id as memberId,
		p.id as p_id,
		p.name as propertyName
		FROM booking b, member m, property p
		WHERE b.guest_id = m.id
		AND b.host_id = #{hostId}
		AND b.property_id = p.id
	</select>

	<select id="getMemberDTO" parameterType="String"
		resultType="MemberDTO">
		select * from member where id = #{memberId};
	</select>

	<select id="listProperty" parameterType="String"
		resultType="PropertyDTO">
		select
		p.id, p.name,
		p.host_id as hostId,
		p.address,
		p.price,
		p.bed_count as bedCount,
		p.max_guest as maxGuest,
		p.reg_date as regDate,
		p.mod_date as modDate,
		p.room_type_id as roomTypeId,
		r.id,
		r.name as
		roomTypeName,
		p.sub_property_type_id as subPropertyTypeId,
		s.id,
		s.name
		as subPropertyTypeName
		from property p, sub_property_type s, room_type
		r
		where host_id = #{hostId}
		and r.id = p.room_type_id
		and
		p.sub_property_type_id = s.id
	</select>

	<select id="listTransaction" parameterType="String"
		resultType="TransactionDTO">
		select
		b.id as booking_table_id,
		b.host_id as hostId,
		b.total_price as totalPrice,
		b.confirm_date as confirmDate,
		b.property_id as propertyId,
		b.booking_number as bookingNumber,
		b.check_out_date as checkOutDate,
		t.id,
		t.booking_id as bookingId,
		t.is_refund as isReFund,
		t.site_fee as siteFee,
		t.pay_expt_date as
		payExptDate,
		t.reg_date as regDate,
		t.mod_date as modDate,
		p.name as
		propertyName,
		p.id
		from transaction t, booking b, property p
		where b.id =
		t.booking_id
		and b.host_id = #{hostId}
		and p.id = b.property_id
	</select>

	<select id="totalEarningList" parameterType="String"
		resultType="TransactionDTO">
		select
		b.total_price as totalPrice,
		t.site_fee as siteFee,
		t.is_refund as isRefund,
		t.pay_expt_date as payExptDate
		from booking b,
		transaction t
		where b.id = t.id
		and sysdate > t.pay_expt_date
		and host_id
		= #{hostId}
	</select>

	<select id="getProperty" parameterType="int"
		resultType="PropertyDTO">
		select
		p.id, p.name,
		p.host_id as hostId,
		p.address,
		p.price,
		p.bed_count as bedCount,
		p.max_guest as maxGuest,
		p.reg_date as regDate,
		p.mod_date as modDate,
		p.room_type_id as roomTypeId,
		r.id,
		r.name as
		roomTypeName,
		p.sub_property_type_id as subPropertyTypeId,
		s.id,
		s.name
		as subPropertyTypeName
		from property p, sub_property_type s, room_type
		r
		where p.id = #{propertyId}
		and r.id = p.room_type_id
		and
		p.sub_property_type_id = s.id
	</select>
	<select id="getSysdate" resultType="java.sql.Date">
		select sysdate from dual
	</select>
	<select id="listAmenityType" resultType="AmenityTypeDTO">
		select
		id, name,
		is_use as
		isUse
		from amenity_type
	</select>
	<select resultType="int" id="getPropertyId"
		parameterType="String">
		select id from
		(select * from property
		where
		host_id=#{hostId}
		order by reg_date desc)
		where ROWNUM = 1
	</select>

	<select resultType="int" id="insertPropertyAmenity"
		parameterType="AmenityDTO">
		insert into amenity(property_id, amenity_type_id)
		values(#{propertyId},#{amenityTypeId})
	</select>

	<select id="updateMemberMode" resultType="int"
		parameterType="String">
		update member set member_mode= '2' where id=#{hostId}
	</select>

	<select id="getGuideContext" resultType="GuideContextDTO"
		parameterType="int">
		select
		id,
		guide_id as guideId,
		context,
		reg_date as
		regDate,
		mod_date as modeDate
		from guide_context
		where
		guide_id=#{guideId}
	</select>

	<select id="getReviewList" resultType="ReviewDTO"
		parameterType="int">
		SELECT
		r.*,
		b.id as b_id,
		b.check_in_date,
		b.check_out_date,
		b.total_price as price,
		p.id as p_id,
		p.name
		FROM review
		r, booking b, property p
		WHERE r.property_id = #{propertyId}
		AND
		r.booking_id = b.id
		AND r.property_id
		= p.id
	</select>

	<select id="getReviewWritingRate" resultMap="selectMapList" parameterType="int">
		SELECT
		r.reviewCount,
		b.bookingCount
		FROM
		(select count(*)
		as reviewCount
		FROM review
		WHERE property_id = #{propertyId}
		AND sysdate > reg_date) r,
		(select count(*)
		as bookingCount
		FROM booking
		WHERE property_id = #{propertyId}
		AND sysdate > reg_date) b
	</select>
	
	<resultMap type="map" id="selectMapList">
		<result column="reviewCount" property="reviewCount" />
		<result column="bookingCount" property="bookingCount" />
	</resultMap>
	
	<update id="bookConfirm" parameterType="int">
		UPDATE booking SET confirm_date = sysdate WHERE id = #{bookingId}
	</update>
		<!-- UPDATE A T1 RIGHT JOIN B T2 
		ON (T2.a = T1.a) 
		SET T1.c = '값1', T2.d = '값2' 
		WHERE A.e = '조건 값' -->
	<update id="payExptDateConfirm" parameterType="java.util.Map">
		UPDATE transaction 
		SET pay_expt_date = TO_DATE('#{payExptDate}', 'YYYY-MM-DD') 
		WHERE booking_id = #{bookingId}
	</update>
	
	<update id="bookReject" parameterType="int">
		UPDATE booking
		SET 
		booking_number = -1
		WHERE id = #{bookingId}
	</update>
	
	<update id="transactionRefund" parameterType="int">
		UPDATE transaction 
		SET 
		is_refund = 'Y'
		WHERE booking_id = #{bookingId}
	</update>
	<!-- <update id="payExptDateConfirm" parameterType="java.sql.Date" >
		UPDATE transaction 
		SET confirm_date = sysdate 
		WHERE id = #{bookingId}
	</update> -->
	
</mapper>
